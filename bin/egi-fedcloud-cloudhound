#!/usr/bin/env ruby

# -------------------------------------------------------------------------- #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

require 'rubygems'

require 'thor'
require 'egi-fedcloud-cloudhound'

class EgiFedcloudCloudhound < Thor
  include Thor::Actions

  desc "ip IP_ADDRESS", "Prints information based on the provided IP address or IP address range"
  method_option :debug, :type => :boolean, :default => Egi::Fedcloud::Cloudhound::Settings.debug,
                :aliases => '-d', :desc => 'Enable debugging'
  def ip(ip_address)
    $stdout.puts Egi::Fedcloud::Cloudhound::Formatter.as_table(
      Egi::Fedcloud::Cloudhound::Extractor.find_by_ip(
        ip_address,
        self.class.static_configuration.merge(options)
      )
    )
  end

  desc "appuri URI", "Prints information based on the provided Appliance MPURI"
  method_option :debug, :type => :boolean, :default => Egi::Fedcloud::Cloudhound::Settings.debug,
                :aliases => '-d', :desc => 'Enable debugging'
  def appuri(uri)
    $stdout.puts Egi::Fedcloud::Cloudhound::Formatter.as_table(
      Egi::Fedcloud::Cloudhound::Extractor.find_by_appuri(
        uri,
        self.class.static_configuration.merge(options)
      )
    )
  end

  class << self
    # Static method required by Thor to make certain
    # actions work.
    def self.source_root
      File.expand_path(File.join('..', '..', 'config'), __FILE__)
    end

    # TODO: move to thor options
    def static_configuration
      static_options = {}

      static_options[:credentials] = Egi::Fedcloud::Cloudhound::Settings.credentials || "#{ENV['HOME']}/.globus/usercred.pem"
      static_options[:ca_path] = Egi::Fedcloud::Cloudhound::Settings.ca_path || '/etc/grid-security/certificates'
      static_options[:gocdb_base_url] = Egi::Fedcloud::Cloudhound::Settings.gocdb_base_url || 'https://goc.egi.eu'
      static_options[:appdb_base_url] = Egi::Fedcloud::Cloudhound::Settings.appdb_base_url || 'https://appdb-pi.egi.eu'

      static_options[:password] = if Egi::Fedcloud::Cloudhound::Settings.secure_credentials
                                    ask('Password:') { |q| q.echo = '*' }
                                  else
                                    nil
                                  end

      static_options
    end
  end
end

EgiFedcloudCloudhound.start
